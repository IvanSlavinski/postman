{
	"info": {
		"_postman_id": "a0440f04-3522-46cf-91bd-b6ae38592572",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21878737"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// // 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test (\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include\r",
							"    (\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"let req = request.data\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name == Ivan\", function () {\r",
							"    var jsonName = pm.response.json();\r",
							"    pm.expect(jsonName.name).to.eql(\"Ivan\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age == 25\", function () {\r",
							"    var jsonAge = pm.response.json();\r",
							"    pm.expect(jsonAge.age).to.eql(\"25\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary == 1000\", function () {\r",
							"    var jsonSalary = pm.response.json();\r",
							"    pm.expect(jsonSalary.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req_name = req.name\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name == Ivan\", function () {\r",
							"    var jsonName = pm.response.json();\r",
							"    pm.expect(jsonName.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"\r",
							"pm.test(\"Age == 25\", function () {\r",
							"    var jsonAge = pm.response.json();\r",
							"    pm.expect(jsonAge.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +req.salary\r",
							"\r",
							"pm.test(\"Salary == 1000\", function () {\r",
							"    var jsonSalary = pm.response.json();\r",
							"    pm.expect(jsonSalary.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let resp_family = resp.family\r",
							"console.log(resp_family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let resp_u_salary_1_5_year = req_salary * 4\r",
							"\r",
							"pm.test(\"u_salary_1_5_year == 4000\", function () {\r",
							"    var jsonSalary4 = pm.response.json();\r",
							"    pm.expect(jsonSalary4.family.u_salary_1_5_year).to.eql(resp_u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"contentType": "",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"contentType": "",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test (\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"\r",
							"pm.test(\"Name == Ivan\", function () {\r",
							"    var jsonName = pm.response.json();\r",
							"    pm.expect(jsonName.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"\r",
							"pm.test(\"Age == 25\", function () {\r",
							"    var jsonAge = pm.response.json();\r",
							"    pm.expect(jsonAge.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +req.salary\r",
							"\r",
							"pm.test(\"Salary == 1000\", function () {\r",
							"    var jsonSalary = pm.response.json();\r",
							"    pm.expect(jsonSalary.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let resp_family = resp.family\r",
							"console.log(resp_family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name\", function () {\r",
							"    var json_data = pm.response.json();\r",
							"    pm.expect(json_data.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function () {\r",
							"    var json_data = pm.response.json();\r",
							"    pm.expect(json_data.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name is Luky\", function () {\r",
							"    var json_data = pm.response.json();\r",
							"    pm.expect(json_data.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog's age is 4\", function () {\r",
							"    var json_data = pm.response.json();\r",
							"    pm.expect(json_data.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"\r",
							"pm.test(\"Name == Ivan\", function () {\r",
							"    var jsonName = pm.response.json();\r",
							"    pm.expect(jsonName.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = +req.age\r",
							"\r",
							"pm.test(\"Age == 25\", function () {\r",
							"    var jsonAge = pm.response.json();\r",
							"    pm.expect(jsonAge.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = +req.salary\r",
							"console.log(\"salary in req = \" + req_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = resp.salary\r",
							"console.log(\"salary in resp = \" + resp_salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"salary in resp = \" + resp_salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary in resp = \" + resp_salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary in resp = \" + resp_salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary[0] from resp == salary from req\", function () {\r",
							"    var jsonSalary = pm.response.json();\r",
							"    pm.expect(jsonSalary.salary[0]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary[1] from resp == salary from req*2\", function () {\r",
							"    var jsonSalary = pm.response.json();\r",
							"    pm.expect(+jsonSalary.salary[1]).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary[2] from resp == salary from req*3\", function () {\r",
							"    var jsonSalary = pm.response.json();\r",
							"    pm.expect(+jsonSalary.salary[2]).to.eql(req_salary*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < resp_salary.length; i++) {\r",
							"  console.log(resp_salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"var json_data = pm.response.json();\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"JSON cointains start_qa_salary\", function () {\r",
							"        pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"JSON cointains qa_salary_after_6_months\", function () {\r",
							"        pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"JSON cointains qa_salary_after_12_months\", function () {\r",
							"        pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"JSON cointains qa_salary_after_1.5_year\", function () {\r",
							"        pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"JSON cointains qa_salary_after_3.5_years\", function () {\r",
							"        pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"JSON cointains person\", function () {\r",
							"        pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = +req.salary\r",
							"\r",
							"pm.test(\"start_qa_salary == salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months == salary*2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months == salary*2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year == salary*3.3\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years == salary*3.8\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1] == salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let req_age = +req.age\r",
							"\r",
							"pm.test(\"person.u_age == req_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"person.u_salary_5_years == salary*4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (key in jsonData['person']) {\r",
							"    if (jsonData['person'].hasOwnProperty(key)){\r",
							"        console.log(key)\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}